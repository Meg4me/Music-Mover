/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAlbumArgs } from "./CreateAlbumArgs";
import { UpdateAlbumArgs } from "./UpdateAlbumArgs";
import { DeleteAlbumArgs } from "./DeleteAlbumArgs";
import { AlbumFindManyArgs } from "./AlbumFindManyArgs";
import { AlbumFindUniqueArgs } from "./AlbumFindUniqueArgs";
import { Album } from "./Album";
import { SongFindManyArgs } from "../../song/base/SongFindManyArgs";
import { Song } from "../../song/base/Song";
import { Artist } from "../../artist/base/Artist";
import { AlbumService } from "../album.service";

@graphql.Resolver(() => Album)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AlbumResolverBase {
  constructor(
    protected readonly service: AlbumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "read",
    possession: "any",
  })
  async _albumsMeta(
    @graphql.Args() args: AlbumFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Album])
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "read",
    possession: "any",
  })
  async albums(@graphql.Args() args: AlbumFindManyArgs): Promise<Album[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Album, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "read",
    possession: "own",
  })
  async album(
    @graphql.Args() args: AlbumFindUniqueArgs
  ): Promise<Album | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Album)
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "create",
    possession: "any",
  })
  async createAlbum(@graphql.Args() args: CreateAlbumArgs): Promise<Album> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        artist: args.data.artist
          ? {
              connect: args.data.artist,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Album)
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "update",
    possession: "any",
  })
  async updateAlbum(
    @graphql.Args() args: UpdateAlbumArgs
  ): Promise<Album | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          artist: args.data.artist
            ? {
                connect: args.data.artist,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Album)
  @nestAccessControl.UseRoles({
    resource: "Album",
    action: "delete",
    possession: "any",
  })
  async deleteAlbum(
    @graphql.Args() args: DeleteAlbumArgs
  ): Promise<Album | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Song])
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "read",
    possession: "any",
  })
  async songs(
    @graphql.Parent() parent: Album,
    @graphql.Args() args: SongFindManyArgs
  ): Promise<Song[]> {
    const results = await this.service.findSongs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Artist, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Artist",
    action: "read",
    possession: "any",
  })
  async artist(@graphql.Parent() parent: Album): Promise<Artist | null> {
    const result = await this.service.getArtist(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
