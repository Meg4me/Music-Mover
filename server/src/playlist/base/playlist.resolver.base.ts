/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePlaylistArgs } from "./CreatePlaylistArgs";
import { UpdatePlaylistArgs } from "./UpdatePlaylistArgs";
import { DeletePlaylistArgs } from "./DeletePlaylistArgs";
import { PlaylistFindManyArgs } from "./PlaylistFindManyArgs";
import { PlaylistFindUniqueArgs } from "./PlaylistFindUniqueArgs";
import { Playlist } from "./Playlist";
import { SongFindManyArgs } from "../../song/base/SongFindManyArgs";
import { Song } from "../../song/base/Song";
import { PlaylistService } from "../playlist.service";

@graphql.Resolver(() => Playlist)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PlaylistResolverBase {
  constructor(
    protected readonly service: PlaylistService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Playlist",
    action: "read",
    possession: "any",
  })
  async _playlistsMeta(
    @graphql.Args() args: PlaylistFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Playlist])
  @nestAccessControl.UseRoles({
    resource: "Playlist",
    action: "read",
    possession: "any",
  })
  async playlists(
    @graphql.Args() args: PlaylistFindManyArgs
  ): Promise<Playlist[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Playlist, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Playlist",
    action: "read",
    possession: "own",
  })
  async playlist(
    @graphql.Args() args: PlaylistFindUniqueArgs
  ): Promise<Playlist | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Playlist)
  @nestAccessControl.UseRoles({
    resource: "Playlist",
    action: "create",
    possession: "any",
  })
  async createPlaylist(
    @graphql.Args() args: CreatePlaylistArgs
  ): Promise<Playlist> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Playlist)
  @nestAccessControl.UseRoles({
    resource: "Playlist",
    action: "update",
    possession: "any",
  })
  async updatePlaylist(
    @graphql.Args() args: UpdatePlaylistArgs
  ): Promise<Playlist | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Playlist)
  @nestAccessControl.UseRoles({
    resource: "Playlist",
    action: "delete",
    possession: "any",
  })
  async deletePlaylist(
    @graphql.Args() args: DeletePlaylistArgs
  ): Promise<Playlist | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Song])
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "read",
    possession: "any",
  })
  async songs(
    @graphql.Parent() parent: Playlist,
    @graphql.Args() args: SongFindManyArgs
  ): Promise<Song[]> {
    const results = await this.service.findSongs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
